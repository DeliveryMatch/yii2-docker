# PHP Docker image for Yii 2.0 Framework runtime
# ==============================================

ARG PHP_BASE_IMAGE_VERSION
FROM php:${PHP_BASE_IMAGE_VERSION} AS min

# Install required system packages for PHP extensions for Yii 2.0 Framework
COPY --from=mlocati/php-extension-installer /usr/bin/install-php-extensions /usr/local/bin/
RUN install-php-extensions \
        intl

# Install required composer dependency manager
COPY --from=composer:latest /usr/bin/composer /usr/local/bin/composer

# Environment settings
ENV PHP_USER_ID=33 \
    PATH=/app:/app/vendor/bin:/root/.composer/vendor/bin:$PATH \
    TERM=linux

# Add configuration files
COPY image-files/min/ /

# Enable mod_rewrite for images with apache
RUN if command -v a2enmod >/dev/null 2>&1; then \
        a2enmod rewrite headers \
    ;fi

# Install Yii framework bash autocompletion
RUN mkdir /etc/bash_completion.d && \
    curl -L https://raw.githubusercontent.com/yiisoft/yii2/master/contrib/completion/bash/yii \
         -o /etc/bash_completion.d/yii

# Install extensions that are not installed by default
RUN apt-get update -y \
    && apt-get install -y libz-dev libc-client-dev libkrb5-dev libxml2-dev libpng-dev libzip-dev zip locales \
    && apt-get clean -y

# Install library for writing/reading Excel files
RUN pecl install xlswriter redis

RUN docker-php-ext-configure ftp --with-openssl-dir=/usr \
	&& docker-php-ext-install ftp

RUN docker-php-ext-configure imap --with-kerberos --with-imap-ssl \
    && docker-php-ext-enable xlswriter redis \
    && docker-php-ext-install -j$(nproc) imap pdo_mysql soap gd zip

# Enable extra locales
RUN sed -i 's/^# *\(nl_NL.UTF-8\)/\1/' /etc/locale.gen \
    && sed -i 's/^# *\(de_DE.UTF-8\)/\1/' /etc/locale.gen \
    && sed -i 's/^# *\(fr_FR.UTF-8\)/\1/' /etc/locale.gen \
    && sed -i 's/^# *\(es_ES.UTF-8\)/\1/' /etc/locale.gen \
    && sed -i 's/^# *\(it_IT.UTF-8\)/\1/' /etc/locale.gen \
    && locale-gen

# Application environment
WORKDIR /app

RUN chmod 755 \
        /usr/local/bin/docker-php-entrypoint


FROM min AS dev
ARG PECL_IMAGICK_INSTALL_SUFFIX
ARG PECL_MONGODB_INSTALL_SUFFIX
ARG PECL_XDEBUG_INSTALL_SUFFIX

# Install system packages
RUN apt-get update && \
    apt-get -y install \
            git \
            unzip \
        --no-install-recommends && \
        apt-get clean && \
        rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Install common system packages for PHP extensions recommended for Yii 2.0 Framework
COPY --from=mlocati/php-extension-installer /usr/bin/install-php-extensions /usr/local/bin/
RUN install-php-extensions \
        imagick${PECL_IMAGICK_INSTALL_SUFFIX} \
        mongodb${PECL_MONGODB_INSTALL_SUFFIX} \
        xdebug${PECL_XDEBUG_INSTALL_SUFFIX} \
        pdo_mysql \
        pdo_pgsql \
        gd \
        pcntl \
        soap \
        zip \
        bcmath \
        exif \
        opcache

# Add configuration files
COPY image-files/dev/ /

# Disable xdebug by default (see PHP_ENABLE_XDEBUG)
RUN rm /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini

# Add GITHUB_API_TOKEN support for composer
RUN chmod 755 \
        /usr/local/bin/docker-php-entrypoint \
        /usr/local/bin/composer

# Install composer
RUN curl -sS https://getcomposer.org/installer | php -- \
        --filename=composer.phar \
        --install-dir=/usr/local/bin && \
    composer clear-cache

# Environment settings
ENV COMPOSER_ALLOW_SUPERUSER=1 \
    PHP_ENABLE_XDEBUG=0


FROM min AS nginx-min

# Install nginx
RUN apt-get update \
 && apt-get install -y --force-yes \
            nginx-full \
            cron \
            supervisor \
            procps \
        --no-install-recommends && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

ENV SUPERVISOR_START_FPM=true \
    SUPERVISOR_START_NGINX=true

# Add configuration files
COPY image-files/nginx/ /

# forward request and error logs to docker log collector
RUN ln -sf /dev/stdout /var/log/nginx/access.log \
 && ln -sf /dev/stderr /var/log/nginx/error.log \
 && ln -sf /usr/sbin/cron /usr/sbin/crond

CMD ["supervisord", "-c", "/etc/supervisor/supervisord.conf"]

EXPOSE 80 443


FROM dev AS nginx-dev

# Install nginx
RUN apt-get update \
 && apt-get install -y --force-yes \
            nginx-full \
            cron \
            supervisor \
            procps \
        --no-install-recommends && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

ENV SUPERVISOR_START_FPM=true \
    SUPERVISOR_START_NGINX=true

# Add configuration files
COPY image-files/nginx/ /

# forward request and error logs to docker log collector
RUN ln -sf /dev/stdout /var/log/nginx/access.log \
 && ln -sf /dev/stderr /var/log/nginx/error.log \
 && ln -sf /usr/sbin/cron /usr/sbin/crond

CMD ["supervisord", "-c", "/etc/supervisor/supervisord.conf"]

EXPOSE 80 443
